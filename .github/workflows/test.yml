name: –ê–≤—Ç–æ—Å–±–æ—Ä–∫–∞ Music M test

on:
  workflow_dispatch:
    inputs:
      namevers:
        description: "–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞"
        required: true
        default: "ü§ñ –ê–≤—Ç–æ—Å–±–æ—Ä–∫–∞"
      descr:
        description: "–û–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞"
        required: true
        default: "‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–±–æ—Ä–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
      release:
        description: "–í—ã–∫–∏–Ω—É—Ç—å –≤ —Ä–µ–ª–∏–∑?"
        required: true
        default: false
        type: boolean
      prerelease:
        description: "–ü—Ä–µ—Ä–µ–ª–∏–∑?"
        required: true
        default: true
        type: boolean

  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    strategy:
      matrix:
        configuration: [Unpacked]
        platform: [x64]  # –°–æ–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ x64, —Ç–∞–∫ –∫–∞–∫ –¥—Ä—É–≥–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã —Ç—Ä–µ–±—É—é—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏

    runs-on: windows-latest

    env:
      Solution_Name: "VK UI3"

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          node-version: 16
          fetch-depth: 0

      - name: Decode the pfx
        run: |
          $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.BASE64_ENCODED_PFX }}")
          $certificatePath = "${{ github.workspace }}\GitHubActionsWorkflow.pfx"
          [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)

      - name: –û–±–Ω–æ–≤–∏—Ç—å TOKEN_STAT_SLY
        run: |
          $repoName = "${{ github.repository }}".Split('/')[1]
          $content = Get-Content -Path "D:\a\$repoName\$repoName\VK UI3\StaticParams.cs"
          $updatedContent = $content -replace 'Environment.GetEnvironmentVariable\("TOKEN_STAT_SLY"\)', '"${{ secrets.TOKEN_STAT_SLY }}"'
          Set-Content -Path "D:\a\$repoName\$repoName\VK UI3\StaticParams.cs" -Value $updatedContent
          Write-Output $updatedContent

      - name: Install .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Setup MSBuild.exe
        uses: microsoft/setup-msbuild@v2

      - name: Restore the application
        run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration
        env:
          Configuration: ${{ matrix.configuration }}

      - name: Build the project (unpacked)
        run: |
          $platform = "${{ matrix.platform }}"
          Write-Host "Building for platform: $platform"
          
          msbuild $env:Solution_Name `
            /p:Configuration=$env:Configuration `
            /p:Platform=$platform `
            /p:PlatformTarget=$platform `
            /p:RuntimeIdentifier="win-$platform" `
            /p:AppxPackageBuildMode=None `
            /p:TOKEN_STAT_SLY="${{ secrets.TOKEN_STAT_SLY }}"
        env:
          Configuration: ${{ matrix.configuration }}

      - name: Remove the pfx
        run: |
          $certificatePath = "${{ github.workspace }}\GitHubActionsWorkflow.pfx"
          Remove-Item -path "$certificatePath"

      - name: Create ZIP archive
        run: |
          $version = "${{ steps.get_version.outputs.VERSION }}"
          $platform = "${{ matrix.platform }}"
          $sourceDir = "${{ github.workspace }}\${{ env.Solution_Name }}\bin\$platform\${{ matrix.configuration }}\"
          $zipPath = "${{ github.workspace }}\Output\${{ env.Solution_Name }}_${platform}_${version}.zip"
          
          if (Test-Path $sourceDir) {
            Write-Host "Creating ZIP archive for $platform from $sourceDir"
            Compress-Archive -Path "$sourceDir\*" -DestinationPath $zipPath -Force
          } else {
            Write-Host "Directory not found: $sourceDir"
            exit 1
          }
        shell: pwsh

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: WinUI3-App-ZIP
          path: ${{ github.workspace }}\Output\*.zip

      - name: –ò–∑–≤–ª–µ—á—å –≤–µ—Ä—Å–∏—é
        id: get_version
        run: |
          $repoName = "${{ github.repository }}".Split('/')[1]
          $csprojPath = "D:\a\$repoName\$repoName\VK UI3\VK UI3.csproj"
          $doc = New-Object xml
          $doc.Load((Convert-Path $csprojPath))
          $version = $doc.SelectSingleNode('//AppxPackageVersion').InnerText
          echo "::set-output name=VERSION::$version"
          echo "–í–µ—Ä—Å–∏—è: $version"
        continue-on-error: true
        if: github.event.inputs.release == 'true'

      # –û—Å—Ç–∞–ª—å–Ω—ã–µ —à–∞–≥–∏ (—Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞, –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram –∏ —Ç.–¥.) –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
      # ...

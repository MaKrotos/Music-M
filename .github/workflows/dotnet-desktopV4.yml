
name: –ê–≤—Ç–æ—Å–±–æ—Ä–∫–∞ Music M

on:
  workflow_dispatch:
    inputs:
      namevers:
        description: '–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞'
        required: true
        default: 'ü§ñ –ê–≤—Ç–æ—Å–±–æ—Ä–∫–∞'
      descr:
        description: '–û–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞'
        required: true
        default: '‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–±–æ—Ä–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'  
      release:
        description: '–í—ã–∫–∏–Ω—É—Ç—å –≤ —Ä–µ–ª–∏–∑?'
        required: true
        default: false
        type: boolean
      prerelease:
        description: '–ü—Ä–µ—Ä–µ–ª–∏–∑?'
        required: true
        default: true
        type: boolean

  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:

  build:

    strategy:
      matrix:
        configuration: [Release]
        platform: [x64]

    runs-on: windows-latest  # –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ä–∞–Ω–Ω–µ—Ä–æ–≤
                             # —Å–º. https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

    env:
      Solution_Name: "VK UI3 (Package)"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –∏–º—è –≤–∞—à–µ–≥–æ —Ä–µ—à–µ–Ω–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä, App1.sln.

    steps:

    - name: Checkout
      uses: actions/checkout@v4
      with:
        node-version: 16
        fetch-depth: 0

    # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤ base64 pfx –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º Signing_Certificate
    - name: Decode the pfx
      run: |
        $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.BASE64_ENCODED_PFX }}")
        $certificatePath = "${{ github.workspace }}\GitHubActionsWorkflow.pfx"
        [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)

    - name: –û–±–Ω–æ–≤–∏—Ç—å TOKEN_STAT_SLY
      run: |
        $repoName = "${{ github.repository }}".Split('/')[1]
        $content = Get-Content -Path "D:\a\$repoName\$repoName\VK UI3\StaticParams.cs"
        $updatedContent = $content -replace 'Environment.GetEnvironmentVariable\("TOKEN_STAT_SLY"\)', '"${{ secrets.TOKEN_STAT_SLY }}"'
        Set-Content -Path "D:\a\$repoName\$repoName\VK UI3\StaticParams.cs" -Value $updatedContent
        Write-Output $updatedContent

    - name: Display disk tree
      run: |
        Get-ChildItem -Recurse | Sort-Object Length -Descending

    # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å .NET Core
    - name: Install .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    # –î–æ–±–∞–≤–∏—Ç—å MSBuild –≤ PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v2

    # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–∞–ø–∫–∏ obj RuntimeIdentifiers
    - name: Restore the application
      run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration
      env:
        Configuration: ${{ matrix.configuration }}

    - name: Print working directory
      run: |
        Write-Host "Current working directory: $(Get-Location)"

    - name: Get Certificate Thumbprint and Replace in Project File
      run: |
        $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.BASE64_ENCODED_PFX }}")
        $certificatePath = "${{ github.workspace }}\GitHubActionsWorkflow.pfx"
        [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)
    
        $pfxPassword = ConvertTo-SecureString -String "${{ secrets.PFX_PASSWORD }}" -AsPlainText -Force
        $pfxCert = Get-PfxCertificate -FilePath $certificatePath -Password $pfxPassword
        Write-Host "Certificate Thumbprint: $($pfxCert.Thumbprint)"
    
        $projectFile = "VK UI3 (Package)/VK UI3 (Package).wapproj"
        $content = Get-Content -Path $projectFile -Raw
        $content = $content -replace '(?<=<PackageCertificateThumbprint>).+?(?=</PackageCertificateThumbprint>)', $pfxCert.Thumbprint
        Set-Content -Path $projectFile -Value $content

    - name: Install PFX certificate
      run: |
        $certificatePath = "${{ github.workspace }}\GitHubActionsWorkflow.pfx"
        $password = ConvertTo-SecureString -String "${{ secrets.PFX_PASSWORD }}" -Force -AsPlainText
        Import-PfxCertificate -FilePath $certificatePath -CertStoreLocation Cert:\LocalMachine\My -Password $password

    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø—É—Ç–µ–º —Å–±–æ—Ä–∫–∏ –∏ —É–ø–∞–∫–æ–≤–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞
    - name: Create the app package
      run: |
        $platforms = "x64", "x86", "ARM64"
        foreach ($platform in $platforms) {
          $certificatePath = "${{ github.workspace }}\GitHubActionsWorkflow.pfx"
          msbuild $env:Solution_Name /p:Configuration=$env:Configuration /p:Platform=$platform /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle /p:PackageCertificateKeyFile="$certificatePath" /p:PackageCertificatePassword="${{ secrets.PFX_PASSWORD }}" /p:AppxPackageDir="$env:Appx_Package_Dir" /p:GenerateAppxPackageOnBuild=true /p:TOKEN_STAT_SLY="${{ secrets.TOKEN_STAT_SLY }}"
        }
      env:
        Appx_Bundle: Never
        Appx_Package_Build_Mode: SideloadOnly
        Appx_Package_Dir: Packages\
        Configuration: ${{ matrix.configuration }}
        TOKEN_STAT_SLY: ${{ secrets.TOKEN_STAT_SLY }}

    # –£–¥–∞–ª–∏—Ç—å pfx
    - name: Remove the pfx
      run: |
        $certificatePath = "${{ github.workspace }}\GitHubActionsWorkflow.pfx"
        Remove-Item -path "$certificatePath"
        
    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å .cer —Ñ–∞–π–ª
    - name: Rename the .cer file
      run: |
        Get-ChildItem -Path "${{ env.Solution_Name }}\\Packages" -Filter *.cer -Recurse -Depth 1 | ForEach-Object {
          Rename-Item -Path $_.FullName -NewName "Certificate.cer"
        }

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: my-artifact
        path: path/to/artifact
        
    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name: my-artifact
        path: path/to/downloaded/artifact




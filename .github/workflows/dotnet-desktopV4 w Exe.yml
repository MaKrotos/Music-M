name: –ê–≤—Ç–æ—Å–±–æ—Ä–∫–∞ Music M (Unpacked - –≤—Å–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã)

on:
  workflow_dispatch:
    inputs:
      namevers:
        description: "–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞"
        required: true
        default: "ü§ñ –ê–≤—Ç–æ—Å–±–æ—Ä–∫–∞"
      descr:
        description: "–û–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞"
        required: true
        default: "‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–±–æ—Ä–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
      release:
        description: "–í—ã–∫–∏–Ω—É—Ç—å –≤ —Ä–µ–ª–∏–∑?"
        required: true
        default: false
        type: boolean
      prerelease:
        description: "–ü—Ä–µ—Ä–µ–ª–∏–∑?"
        required: true
        default: true
        type: boolean

  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: windows-latest

    env:
      Project_Name: "VK UI3"
      Output_Dir: "${{ github.workspace }}\Output"
      Configuration: "Unpacked"

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º .NET 8.x –≤–º–µ—Å—Ç–æ 9.x
      - name: Setup .NET 8.x
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ workload'—ã
      - name: Install required workloads
        run: |
          dotnet workload install wasm-tools
          dotnet workload install maui
          dotnet workload install windowsdesktop

      - name: Restore NuGet packages
        run: dotnet restore "$env:Project_Name/$env:Project_Name.csproj"

      - name: –û–±–Ω–æ–≤–∏—Ç—å TOKEN_STAT_SLY
        run: |
          $content = Get-Content -Path "$env:Project_Name/StaticParams.cs" -ErrorAction SilentlyContinue
          if ($content) {
            $updatedContent = $content -replace 'Environment.GetEnvironmentVariable\("TOKEN_STAT_SLY"\)', '"${{ secrets.TOKEN_STAT_SLY }}"'
            Set-Content -Path "$env:Project_Name/StaticParams.cs" -Value $updatedContent
            Write-Output $updatedContent
          }

      - name: Build and Publish for all platforms
        run: |
          # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å .NET 8.x
          $env:DOTNET_ROOT = "C:\Program Files\dotnet\sdk\8.0.400"

          $platforms = @(
            @{ Platform="x64"; Runtime="win-x64" },
            @{ Platform="x86"; Runtime="win-x86" },
            @{ Platform="ARM64"; Runtime="win-arm64" }
          )

          foreach ($platform in $platforms) {
            Write-Host "–°–±–æ—Ä–∫–∞ –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã $($platform.Platform)..."

            # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            Remove-Item -Path "bin\$($platform.Platform)\$env:Configuration" -Recurse -Force -ErrorAction SilentlyContinue
            Remove-Item -Path "obj\$($platform.Platform)\$env:Configuration" -Recurse -Force -ErrorAction SilentlyContinue

            # –°–±–æ—Ä–∫–∞ —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º –≤–µ—Ä—Å–∏–∏ .NET
            & "$env:DOTNET_ROOT\dotnet.exe" build "$env:Project_Name/$env:Project_Name.csproj" `
              -c $env:Configuration `
              -p:Platform=$($platform.Platform) `
              -p:WindowsPackageType=None `
              -p:SelfContained=true `
              -p:WindowsAppSDKSelfContained=true `
              -p:RuntimeIdentifier=$($platform.Runtime) `
              -p:UseWindowsAppSDK=true `
              -p:WindowsAppSDKSelfContainedDeployment=true

            # –ü—É–±–ª–∏–∫–∞—Ü–∏—è
            $outputDir = "$env:Output_Dir\$($platform.Platform)\$env:Configuration"
            New-Item -ItemType Directory -Path $outputDir -Force
            & "$env:DOTNET_ROOT\dotnet.exe" publish "$env:Project_Name/$env:Project_Name.csproj" `
              -c $env:Configuration `
              -r $($platform.Runtime) `
              --self-contained true `
              -p:WindowsPackageType=None `
              -p:WindowsAppSDKSelfContained=true `
              -p:Platform=$($platform.Platform) `
              -p:UseWindowsAppSDK=true `
              -p:WindowsAppSDKSelfContainedDeployment=true `
              -o $outputDir

            # –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ
            $zipPath = "$env:Output_Dir\VK_UI3_Unpacked_$($platform.Platform).zip"
            Compress-Archive -Path "$outputDir\*" -DestinationPath $zipPath -Force

            Write-Host "–°–±–æ—Ä–∫–∞ –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã $($platform.Platform) –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
          }

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: VK_UI3_Unpacked_All
          path: |
            ${{ env.Output_Dir }}\VK_UI3_Unpacked_x64.zip
            ${{ env.Output_Dir }}\VK_UI3_Unpacked_x86.zip
            ${{ env.Output_Dir }}\VK_UI3_Unpacked_ARM64.zip

      # –û—Å—Ç–∞–ª—å–Ω—ã–µ —à–∞–≥–∏ (–≤–µ—Ä—Å–∏—è, —Ä–µ–ª–∏–∑, —Ç–µ–ª–µ–≥—Ä–∞–º) –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
      - name: –ò–∑–≤–ª–µ—á—å –≤–µ—Ä—Å–∏—é
        id: get_version
        run: |
          $csprojPath = "$env:Project_Name/$env:Project_Name.csproj"
          [xml]$doc = Get-Content $csprojPath
          $version = $doc.Project.PropertyGroup.AppxPackageVersion
          if (-not $version) {
            $version = $doc.Project.PropertyGroup.Version
          }
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "–í–µ—Ä—Å–∏—è: $version"
        if: github.event.inputs.release == 'true'

      - name: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞
        id: check_release
        run: |
          $version = "${{ steps.get_version.outputs.version }}"
          $headers = @{
            "Authorization" = "token ${{ secrets.TOKEN }}"
          }
          $releases = Invoke-RestMethod -Uri "https://api.github.com/repos/${{ github.repository }}/releases" -Headers $headers
          $release = $releases | Where-Object { $_.tag_name -eq $version -and $_.draft -eq $false -and $_.prerelease -eq $false }
          if ($release) {
            Write-Host "–†–µ–ª–∏–∑ —Å —Ç–µ–≥–æ–º $version —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
            echo "exists=true" >> $GITHUB_OUTPUT
          } else {
            Write-Host "–†–µ–ª–∏–∑ —Å —Ç–µ–≥–æ–º $version –Ω–µ –Ω–∞–π–¥–µ–Ω"
            echo "exists=false" >> $GITHUB_OUTPUT
          }
        if: github.event.inputs.release == 'true'

      - name: –°–æ–∑–¥–∞—Ç—å —Ä–µ–ª–∏–∑
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          release_name: ${{ github.event.inputs.namevers }}
          body: ${{ github.event.inputs.descr }}
          draft: false
          prerelease: ${{ github.event.inputs.prerelease }}
        if: steps.check_release.outputs.exists == 'false' && github.event.inputs.release == 'true'

      - name: –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã –≤ —Ä–µ–ª–∏–∑
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.TOKEN }}
          file: ${{ env.Output_Dir }}\VK_UI3_Unpacked_*.zip
          asset_name: VK_UI3_Unpacked
          tag: ${{ steps.get_version.outputs.version }}
          overwrite: true
          file_glob: true
        if: steps.check_release.outputs.exists == 'false' && github.event.inputs.release == 'true'

      - name: –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          RELEASE_URL: https://github.com/${{ github.repository }}/releases/tag/${{ steps.get_version.outputs.version }}
        run: |
          $telegramBotToken = '${{ secrets.TELEGRAM_BOT_TOKEN }}'
          $telegramChatId = '${{ secrets.TELEGRAM_CHAT_ID }}'
          $releaseUrl = 'https://github.com/${{ github.repository }}/releases/tag/${{ steps.get_version.outputs.version }}'
          $message = @"
          <b>üéâ –ù–æ–≤—ã–π —Ä–µ–ª–∏–∑:</b> ${{ github.event.inputs.namevers }}
          <b>üì¶ –í–µ—Ä—Å–∏—è:</b> ${{ steps.get_version.outputs.version }}
          <b>üìù –û–ø–∏—Å–∞–Ω–∏–µ:</b> ${{ github.event.inputs.descr }}
          <b>üîó <a href='$releaseUrl'>–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–ª–∏–∑</a></b>
          "@
          $uri = 'https://api.telegram.org/bot' + $telegramBotToken + '/sendMessage'
          $body = @{
              chat_id = $telegramChatId
              text = $message
              parse_mode = 'HTML'
          }
          $bodyJson = $body | ConvertTo-Json -Compress
          Invoke-RestMethod -Uri $uri -Method Post -Body $bodyJson -ContentType 'application/json'

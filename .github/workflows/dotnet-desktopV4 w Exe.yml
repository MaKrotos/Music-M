name: –ê–≤—Ç–æ—Å–±–æ—Ä–∫–∞ Music M (Unpacked)

on:
  workflow_dispatch:
    inputs:
      namevers:
        description: "–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞"
        required: true
        default: "ü§ñ –ê–≤—Ç–æ—Å–±–æ—Ä–∫–∞ (Unpacked)"
      descr:
        description: "–û–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞"
        required: true
        default: "‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–±–æ—Ä–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
      release:
        description: "–í—ã–∫–∏–Ω—É—Ç—å –≤ —Ä–µ–ª–∏–∑?"
        required: true
        default: false
        type: boolean
      prerelease:
        description: "–ü—Ä–µ—Ä–µ–ª–∏–∑?"
        required: true
        default: true
        type: boolean

  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    strategy:
      matrix:
        configuration: [Release]
        platform: [x64]

    runs-on: windows-latest

    env:
      Solution_Name: "VK UI3 (Unpacked)"

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: –û–±–Ω–æ–≤–∏—Ç—å TOKEN_STAT_SLY
        run: |
          $repoName = "${{ github.repository }}".Split('/')[1]
          $content = Get-Content -Path "${{ github.workspace }}\VK UI3\StaticParams.cs" -ErrorAction SilentlyContinue
          if ($content) {
            $updatedContent = $content -replace 'Environment.GetEnvironmentVariable\("TOKEN_STAT_SLY"\)', '"${{ secrets.TOKEN_STAT_SLY }}"'
            Set-Content -Path "${{ github.workspace }}\VK UI3\StaticParams.cs" -Value $updatedContent
          }

      - name: Install .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Setup MSBuild.exe
        uses: microsoft/setup-msbuild@v2

      - name: –ò–∑–≤–ª–µ—á—å –≤–µ—Ä—Å–∏—é
        id: get_version
        run: |
          $doc = New-Object xml
          $doc.Load("${{ github.workspace }}\VK UI3\VK UI3.csproj")
          $version = $doc.SelectSingleNode('//AppxPackageVersion').InnerText
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "–í–µ—Ä—Å–∏—è: $version"
        if: github.event.inputs.release == 'true'

      - name: Clean publish directories
        run: |
          Remove-Item -Recurse -Force publish-* -ErrorAction SilentlyContinue

      - name: Restore NuGet packages
        run: dotnet restore "VK UI3/VK UI3.csproj"
      
      - name: Publish Unpacked App with Proper Resource Generation
        run: |
          $architectures = @{
              "x64"   = @{ RuntimeId = "win-x64";   OutputDir = "publish-x64" }
              "x86"   = @{ RuntimeId = "win-x86";   OutputDir = "publish-x86" }
              "arm64" = @{ RuntimeId = "win-arm64"; OutputDir = "publish-arm64" }
          }
          
          foreach ($arch in $architectures.Keys) {
              $runtimeId = $architectures[$arch].RuntimeId
              $outDir = $architectures[$arch].OutputDir
              $intermediateDir = "obj\Release\net8.0-windows10.0.22000.0\$runtimeId"
              $zipFile = "VK_UI3_win-$arch-unpacked.zip"
              
              Write-Host "Building for architecture: $arch"
              
              # 1. Clean previous builds
              Remove-Item -Path $outDir, $intermediateDir -Recurse -Force -ErrorAction SilentlyContinue
              
              # 2. Restore and build (without publish)
              dotnet build "VK UI3/VK UI3.csproj" `
                  --configuration Release `
                  --runtime $runtimeId `
                  -p:WindowsPackageType=None `
                  -p:GenerateAppxPackageOnBuild=false `
                  -p:SkipPriGeneration=false `
                  -p:AppxBundle=Never
              
              # 3. Verify PRI files were generated
              $priFiles = Get-ChildItem -Path $intermediateDir -Filter "*.pri" -Recurse
              if ($priFiles.Count -eq 0) {
                  Write-Host "##[warning] No PRI files generated for $arch!"
              }
              
              # 4. Publish with all resources
              dotnet publish "VK UI3/VK UI3.csproj" `
                  --configuration Release `
                  --runtime $runtimeId `
                  --output $outDir `
                  --no-build `
                  -p:WindowsPackageType=None `
                  -p:WindowsAppSDKSelfContained=true `
                  -p:SelfContained=true `
                  -p:IncludeNativeLibrariesForSelfExtract=true
              
              # 5. Verify all files are present
              $requiredFiles = @("*.exe", "*.dll", "*.pri", "*.config")
              foreach ($pattern in $requiredFiles) {
                  $files = Get-ChildItem -Path $outDir -Filter $pattern
                  if ($files.Count -eq 0) {
                      Write-Host "##[warning] Missing $pattern files in output!"
                  }
              }
              
              # 6. Create zip archive
              if (Test-Path $outDir) {
                  Compress-Archive -Path "$outDir\*" -DestinationPath $zipFile -CompressionLevel Optimal
                  Write-Host "Created $zipFile"
              }
          }

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Unpacked-Binaries
          path: |
            VK_UI3_win-x64-unpacked.zip
            VK_UI3_win-x86-unpacked.zip
            VK_UI3_win-arm64-unpacked.zip

      - name: Create Release
        if: github.event.inputs.release == 'true'
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ github.event.inputs.namevers }}
          body: ${{ github.event.inputs.descr }}
          tag_name: ${{ steps.get_version.outputs.version }}
          prerelease: ${{ github.event.inputs.prerelease }}
          files: |
            VK_UI3_win-x64-unpacked.zip
            VK_UI3_win-x86-unpacked.zip
            VK_UI3_win-arm64-unpacked.zip
